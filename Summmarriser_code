import torch.nn as nn
from transformer import Transformer, MultiHeadAttention, PositionalEncoding, ProjectionLayer, InputEmbedding, feed_forward_block, EncoderBlock, DecoderBlock

def build_summarizer(src_vocab_size: int, trg_vocab_size: int, src_seq_len: int, trg_seq_len: int, d_model: int = 512, N: int = 6, H: int = 8, dropout: float = 0.1, d_ff: int = 2048):
    # Create the embedding layers
    src_embed = InputEmbedding(d_model, src_vocab_size)
    trg_embed = InputEmbedding(d_model, trg_vocab_size)

    # Create the positional encoding layers
    src_pos = PositionalEncoding(d_model, src_seq_len, dropout)
    trg_pos = PositionalEncoding(d_model, trg_seq_len, dropout)

    # Create the encoder blocks
    encoder_blocks = nn.ModuleList()
    for _ in range(N):
        encoder_self_attention_block = MultiHeadAttention(d_model, H, dropout)
        feed_forward_block = feed_forward_block(d_model, d_ff, dropout)
        encoder_block = EncoderBlock(encoder_self_attention_block, feed_forward_block, dropout)
        encoder_blocks.append(encoder_block)

    # Create the decoder blocks for summarization
    decoder_blocks = nn.ModuleList()
    for _ in range(N):
        decoder_self_attention_block = MultiHeadAttention(d_model, H, dropout)
        decoder_cross_attention_block = MultiHeadAttention(d_model, H, dropout)
        feed_forward_block = feed_forward_block(d_model, d_ff, dropout)
        decoder_block = DecoderBlock(decoder_self_attention_block, decoder_cross_attention_block, feed_forward_block, dropout)
        decoder_blocks.append(decoder_block)

    # Create the encoder and decoder
    encoder = nn.ModuleList(encoder_blocks)
    decoder = nn.ModuleList(decoder_blocks)

    # Create the projection layer for summarization
    projection_layer = ProjectionLayer(d_model, trg_vocab_size)

    # Create the transformer for summarization
    summarizer = Transformer(encoder, decoder, src_embed, trg_embed, src_pos, trg_pos, projection_layer)

    # Initialize the parameters with Xavier initialization
    for p in summarizer.parameters():
        if p.dim() > 1:
            nn.init.xavier_uniform_(p)

    return summarizer

# Usage example:
src_vocab_size = 10000  # Your source vocabulary size
trg_vocab_size = 10000  # Your target vocabulary size
src_seq_len = 50  # Length of input sequence
trg_seq_len = 30  # Length of target sequence for summarization
summarizer = build_summarizer(src_vocab_size, trg_vocab_size, src_seq_len, trg_seq_len)
